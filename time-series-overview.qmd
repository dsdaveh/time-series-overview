---
title: "A Time Series Overview with Quarto"
author: "Dave Hurst - Director of Data Science Platforms"
date: "October 10, 2024"
format: 
    revealjs:
        incremental: true
editor: visual
css: styles.css
execute: 
  echo: false
  cache: true
---

## Overview {.smaller}

This presentation offers a friendly introduction to Time Series, designed for everyone at ProCogia. We’ll begin with a brief introduction to Dave, who is leading our Data Science platform strategy. From there, we'll explore what sets time series data apart from other types of data, dive into analysis and forecasting using an R framework, and showcase engaging examples of time series from current events. Finally, we’ll conclude with a discussion on Quarto, the technical communication tool used to create this presentation.\
\
***Please note**: This presentation includes data from the **Gun Violence Archive**, and some discussion around shooting fatalities which some may find upsetting.*

## Data Science Platform Strategy

{{< include dsp-animation.qmd >}}

```{r setup}
#| echo: false

library(tidyverse)
library(here)
library(readxl)
```

## Agenda

:::::: columns
::: column
### Time Series

-   What are time series?
-   What problems can it solve?
-   `tidyverts` a ts framework for R
-   Time series in the context of AI
:::

:::: column
::: fragment
```{mermaid}
graph TD
    ML["Machine Learning"] --> AI["Artificial Intelligence"] 
    DS["Data Science"] --> ML
    DS --> TS["Time Series"]
```
:::
::::
::::::

### Quarto

-   An open-source scientific and technical publishing system

## Time Series Overview

::::: columns
::: {.column width="50%"}
### Definition

-   A **time series** is a sequence of data points collected at regular time intervals, used to identify patterns, trends, or make forecasts over time.

### Use Cases

-   Segmented product sales over time.
-   County pothole repair records.
-   Monitoring stock prices and financial markets.
-   Analyzing sensor data in IoT systems.
:::

::: {.column width="50%"}

```{r ex-air-1}
#| echo: false
#| fig-height: 8
#| fig-cap: "Example Time Series Forecast"

library(tsibble)
library(fpp3)

# Example: Monthly Air Passenger Data
air_passengers <- as_tsibble(AirPassengers)

# Simple Forecasting Model
fit <- air_passengers %>%
  model(ETS(value))

# Forecast the next 12 periods
fc <- fit %>% forecast(h = 12)

# Plot the time series with forecast
autoplot(air_passengers, value) +
  autolayer(fc) +
  labs(title = "Air Passenger Forecast",
       y = "Passengers",
       x = "Year")
```

:::
:::::



## TS Forecast and Analysis {.smaller}

### Introducing the `tidyverts`

![tidyverts packages](images/tidyverts.png)

::::: columns
::: column
[tidyverts.org](https://tidyverts.org/)
:::

::: column
[![https://otexts.com/fpp3/](images/hyndman_book.png){fig-align="left" width="600"}](https://otexts.com/fpp3/)
:::
:::::

## TS Forecast vs Analysis {.smaller}

::: big-bullets
-   $Time Series Forecast \Rightarrow Modeling$
:::

```{r ex-air-2}
#| echo: true
#| output-location: column
#| code-line-numbers: 1|4|7-8|11|14-18
#| code-fold: true

library(fpp3) # tidyverts

# Example: Monthly Air Passenger Data
air_passengers <- as_tsibble(AirPassengers)

# Simple Forecasting Model
fit <- air_passengers |>
  model(ETS(value ~ error() + trend() + season()))

# Forecast the next 12 periods
fc <- fit %>% forecast(h = 12)

# Plot the time series with forecast
autoplot(air_passengers, value) +
  autolayer(fc) +
  labs(title = "Air Passenger Forecast",
       y = "Passengers",
       x = "Year")
```

::: big-bullets
-   $Time Series Analysis \Rightarrow Decomposition/Segmentation$
:::

## TS Decomposition

```{r decomp}
#| echo: true
air_passengers |> 
    model(stl = STL(value)) |> 
    components() |> 
    autoplot()
```

## A More 'Real World' Dataset {.smaller}

Courtesy of [Gun Violence Archive](https://www.gunviolencearchive.org)

:::: panel-tabset
### Background

::: {style="font-size: 0.8em;"}
This is an initial look at the Malcolm Gladwell assertion from Revisionist History podcast [Guns Part 4: Moral Hazard](https://www.pushkin.fm/podcasts/revisionist-history/guns-part-4-moral-hazard). The assertion is that gun homicide statistics, which are decreasing, are masking a rise in total gun violence incidents because non-fatal shooting are not counted in the data.

Note: the data from the Gun Violence Archive includes both fatality and injury-only incidents and is compiled from media reports. Incidents that were reported to the police, but not found in public reports is not included.
:::

### Overview Plot

```{r gva}
#| echo: false


gva3state <- read_excel(here("data/Gun Violence Archive - University of San Diego - Killed or Injured 20140101 - 20231010.xlsx"), 
    skip = 4) |> 
    mutate( Date = as.Date(Date),
            severity = case_when(
                `# Victims Killed` > 0 ~ 'Victim Fatality',
                `# Victims Injured` > 0 ~ 'Victim Injury',
                `# Suspect Killed` > 0 ~ 'Suspect Fatality',
                `# Suspects Injured` > 0 ~ 'Suspect Injury',
                TRUE ~ 'No Injury'),
            fatality = str_detect(severity, 'Fatality'))

gva3state |> 
    filter(fatality == TRUE) |> 
    count(Date, name = 'Incidents') |> 
    ggplot(aes(Date, Incidents)) + 
    geom_line() +
    geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs")) +
    ggtitle("Number of Gun Fatalities/Day (CA + IN + IL)" )
```

### Decomp

```{r gva_decomp1}
#| echo: false

gva3state |> 
    filter(Date < ymd('2023-10-01'),
           Date >= ymd('2020-10-01')) |>
    count(Date, name = 'Incidents') |> 
    as_tsibble(index = Date) |> 
    fill_gaps(Incidents = 0L) |> 
    model(stl = STL(Incidents)) |> 
    components() |> 
    autoplot()
```

### Data {.smaller}

```{r gva_raw}
#| echo: false
#| class-output: "small-table"

library(gt)
gva3state |> 
    select(`Incident ID`, Date, State, City, severity, fatality) |> 
    head(50) |> 
    gt()

```
::::

##  {.smaller}

```{r gva_decomp2}
#| echo: true
#| code-line-numbers: 4-6

gva_ts_yr <- gva3state |> 
    filter(Date < ymd('2023-10-01'),
           Date >= ymd('2020-10-01')) |> 
    count(Date, State, fatality, name = 'Incidents') |> 
    as_tsibble(index = Date,
               key = c(State, fatality)) |> 
    fill_gaps(Incidents = 0L)

gva_ts_yr_plt <- gva_ts_yr |> 
    model(stl = STL(Incidents)) |> 
    components() |> 
    autoplot() 
gva_ts_yr_plt
```

##  {.smaller}

```{r plotly}
#| echo: true
library(plotly)
ggplotly(gva_ts_yr_plt)
```

## Forecasting Multiple Cities {.smaller}

```{r fc_3city}
#| echo: true
#| output-location: slide
#| code-line-numbers: 4|7|14
gva_3city <- gva3state |> 
    filter(Date < ymd('2023-10-01'),
           Date >= ymd('2020-10-01'),
           City %in% c('Chicago', 'Los Angeles', 'Indianapolis')) |> 
    count(Date, City, name = 'Incidents') |> 
    as_tsibble(index = Date,
               key = c(City)) |> 
    fill_gaps(Incidents = 0L)

gva_3city_train <- gva_3city |> filter(Date < ymd('2023-09-01'))
gva_3city_test <- gva_3city |> filter(Date >= ymd('2023-09-01'))

gva_3city_fit <- gva_3city_train |> 
    model(ETS = ETS(Incidents))

# Forecast the next 12 periods
gva_3city_fc <- gva_3city_fit %>% forecast(h = 30)

# Plot the time series with forecast
gva_3city_train |> 
    filter(Date >= ymd('2023-07-01')) |> 
    autoplot(Incidents) +
    autolayer(gva_3city_fc, Incidents, alpha = 0.5) +
    autolayer(gva_3city_test, Incidents, alpha = 0.3)+
    labs(title = "Metropolis GVA September Incidents Forecast") +
    facet_wrap(. ~ City, ncol = 1, scales = "free_y")
```

## Chicago

```{r chicago}
gva_chicago <- gva3state |> 
    filter(Date < ymd('2023-10-01'),
           Date >= ymd('2020-10-01'),
           City == "Chicago",
           State == "Illinois") |> 
    count(Date, City, name = 'Incidents') |> 
    as_tsibble(index = Date) |> 
    fill_gaps(Incidents = 0L)

gva_chi_train <- gva_chicago |> filter(Date < ymd('2023-09-01'))
gva_chi_test <- gva_chicago |> filter(Date >= ymd('2023-09-01'))

gva_chi_train |> 
    autoplot(Incidents) +
    geom_line(data = gva_chi_test, color = "skyblue") +
    ggtitle('Chicago Gun Violence 2023')
```

## Chicago Forecast - ETS

### Exponential Smoothing

```{r chi_forecast}
#| echo: true
#| output-location: slide
chi_fit <- gva_chi_train |> 
  model(ETS(Incidents))

# Forecast the next 12 periods
chi_fc <- chi_fit %>% forecast(h = 30)

# Plot the time series with forecast
gva_chi_train |> 
    filter(year(Date) == 2023) |> 
    autoplot(Incidents) +
    autolayer(chi_fc, Incidents, alpha = 0.5) +
    autolayer(gva_chi_test, Incidents, alpha = 0.3)+
    labs(title = "Chicago GVA September Incidents Forecast")

```

## ARIMA Models

::: fragment
### AR - Auto Regression

-   Regression model using preceding time lag(s)

### I - Integrated

-   Compute Differences to remove trend, seasonality, variance (stationarity)

### MA - Moving Average (Model)

-   Maximum Likelihood Estimation (MLE) model using the residual (error) term(s)
:::

## ARIMA (and SARIMA) Models

`ARIMA(y ~ pdq(p,d,q) + PDQ(P,D,Q) )`

AR(p) where:

$$
X_t = c + \phi_1 X_{t-1} + \phi_2 X_{t-2} + \dots + \phi_p X_{t-p} + \epsilon_t
$$

MA(q)

$$
X_t = \mu + \epsilon_t + \theta_1 \epsilon_{t-1} + \theta_2 \epsilon_{t-2} + \dots + \theta_q \epsilon_{t-q}
$$

d - is the number of differences\
P,D,Q - are the seasonal terms

## ARIMA Process

```{mermaid}
graph TD
    classDef boxStyle padding:30px;

    Step1["Plot the data. Understand the Patterns"] --> Step2["Stablize Variables (Box-Cox)"]
    Step2 --> Choose["Select Method"]
    Choose --> |Auto| StepA1["Use ARIMA()"]
    Choose --> |Manual| StepB1["Difference to make series stationary"]
    StepB1 --> StepB2["Plot ACF/PACF"]
    StepB2 --> StepB3["Use ARIMA(var ~ pdq() + PDQ())"]
    StepB3 --> Residuals["Check Residuals and ACF"]
    StepA1 --> Residuals
    Residuals --> |No| StepB2
    Residuals --> |Yes| Forecast["Calculate Forcast"]
    
    style Choose fill:#9f9,stroke:#333,stroke-width:2px,rx:50,ry:50;
    style Residuals fill:#9f9,stroke:#333,stroke-width:2px,rx:50,ry:50;

```

## ARIMA - Stationarity Example

```{r airex-1}
autoplot(air_passengers, value) 
```

## ARIMA - Stationarity Example {.smaller}

```{r airex-2}
#| echo: true
#| output-location: column
air_passengers |> 
    mutate(log_v = log(value)) |> 
    autoplot(log_v) 
```

Constant variance, but trend and seasonality are present.

## ARIMA - Stationarity Example {.smaller}

```{r airex-3}
#| echo: true
#| warning: false
#| output-location: column
air_passengers |> 
    mutate(log_v = log(value),
           d1 = difference(log_v, lag = 1)) |>
    autoplot(d1) 
```

Trend is removed, but seasonality exists.

## ARIMA - Stationarity Example {.smaller}

```{r airex-4}
#| echo: true
#| warning: false
#| output-location: column
air_passengers |> 
    mutate(log_v = log(value),
           d1 = difference(log_v, lag = 12),
           d1D1 = difference(d1, lag = 1)) |>
    autoplot(d1D1) 
```

Looks like whith noise. Let's do a statistical test.

$H_0$ is that series is stationary:


::: fragment
```{r airex-5}
#| echo: true
#| warning: false
#| output-location: column

air_passengers |> 
    mutate(log_v = log(value),
           D1 = difference(log_v, lag = 12),
           D1d1 = difference(D1, lag = 1)) |>
    features(D1d1, unitroot_kpss) 
```

:::



## Chicago Forecast - ARIMA

```{r}
#| echo: true
gva_chi_train |> 
    gg_tsdisplay(y = Incidents |> 
                     difference(7), 
                 plot_type = 'partial')
```

## Chicago Forecast - ARIMA

```{r chi_arima}
#| echo: true
#| output-location: fragment
#| code-line-numbers: 2-8

chi_fit <- gva_chi_train |> 
  model(auto_arima = ARIMA(Incidents),
        #auto_arima2 = ARIMA(Incidents, stepwise = FALSE, approx = FALSE),
        auto_dfix = ARIMA(Incidents ~ 0 + pdq(1,1,1) + PDQ(0,1,2)),
        arima_ar = ARIMA(Incidents ~ 0 + pdq(2,0,0) + PDQ(4,1,0)),
        arima_ma = ARIMA(Incidents ~ 0 + pdq(0,0,2) + PDQ(0,1,1)),
        ets = ETS(Incidents),
        snaive = SNAIVE(Incidents))

# Forecast the next 12 periods
chi_fc <- chi_fit %>% forecast(h = 30)

chi_fit |> pivot_longer(everything())
```

## Chicago Forecast - ARIMA output {.smaller}

:::::: columns
::: {.column width="80%"}
```{r arima_plts2}
#| fig-height: 8
autoplot(chi_fc, level = NULL, size = 2) +
    autolayer(gva_chi_test, Incidents, alpha = 0.3)+
    labs(title = "Chicago GVA September Incidents Forecast") +
    facet_wrap(. ~ .model, ncol = 3) +
    guides(color = "none", fill = "none")  # Remove the guides (legend)
```
:::

:::: {.column width="20%"}
::: fragment
```{r}
#| echo: false
accuracy(chi_fc, gva_chi_test) |> 
    select(.model, RMSE) |> 
    arrange(RMSE) |> 
    gt() 
```
:::
::::
::::::

## Next Steps {.big-bullets}

- Explore advanced models
    - `fable::prophet()`
    - ML algorithms `nnetar`, `xgboost`
    - Time Series LLM
- Get it out there! (with Quarto)
    - publish on `github.io`
    - Add a Shiny App
    - publish on [](https://connect.procogia.com/), [(public) Posit Connect](https://posit.co/products/enterprise/connect/), [Quarto Pub](https://quartopub.com/)
    - Quarto for docs, web sites, books, ... See [Quarto Gallery](https://quarto.org/docs/gallery/)
    
## Q&A {.big-bullets}

::: {.nonincremental}
- Python equivalent to `tidyverts`?
- 
- 
- Getting started with Quarto 
    - on [VS Code](https://quarto.org/docs/tools/vscode.html) or [Jupyter Lab](https://quarto.org/docs/tools/jupyter-lab.html)
:::
