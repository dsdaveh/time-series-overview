---
title: "Time Series Overview"
format: 
    revealjs:
        incremental: true
editor: visual
css: styles.css
execute: 
  echo: true
  cache: true
---

## Agenda

## Time Series

-   What are time series
-   What problems can it solve
-   Where does ts fit
-   `tidyverts` a ts framework for R

## Time Series - in an AI world

```{r setup}
library(tidyverse)
library(here)
library(readxl)
```

```{mermaid}
graph TD
    AI["Artificial Intelligence"] --> ML["Machine Learning"]
    ML --> DS["Data Science"]
    DS --> TS["Time Series"]
```

## Time Series Overview

::::: columns
::: {.column width="50%"}
### Definition

-   A **time series** is a sequence of data points collected at regular time intervals, used to identify patterns, trends, or make forecasts over time.

### Use Cases

-   Segmented product sales over time.
-   County pothole repair records.
-   Monitoring stock prices and financial markets.
-   Analyzing sensor data in IoT systems.
:::

::: {.column width="50%"}
```{r ex-air-1}
#| echo: false
#| fig-height: 8
#| fig-cap: "Example Time Series Forecast"

library(tsibble)
library(fpp3)

# Example: Monthly Air Passenger Data
air_passengers <- as_tsibble(AirPassengers)

# Simple Forecasting Model
fit <- air_passengers %>%
  model(ETS(value))

# Forecast the next 12 periods
fc <- fit %>% forecast(h = 12)

# Plot the time series with forecast
autoplot(air_passengers, value) +
  autolayer(fc) +
  labs(title = "Air Passenger Forecast",
       y = "Passengers",
       x = "Year")
```
:::
:::::



## TS Forecast vs Analysis: Digression {.big-bullets}

:::::: columns
:::: {.column width="50%"}
### Data Science

![](images/r4ds-workflow.png){width="500"}
:::: 
:::: column

::: fragment
### Data Analytics

![](images/r4ds-workflow-bi.png){width="500"}
:::
::::
::::::

-   Data Analytics = Data Science - Modeling
-   Business Intelligence = Data Analytics + DataOps



## TS Forecast vs Analysis {.smaller} 

<div class="big-bullets">
-   $Time Series Forecast \Rightarrow Modeling$
</div>

```{r ex-air-2}
#| echo: true
#| output-location: column
#| code-line-numbers: 1|4|7-8|11|14-18
#| code-fold: true

library(fpp3) # tidyverts

# Example: Monthly Air Passenger Data
air_passengers <- as_tsibble(AirPassengers)

# Simple Forecasting Model
fit <- air_passengers |>
  model(ETS(value ~ error() + trend() + season()))

# Forecast the next 12 periods
fc <- fit %>% forecast(h = 12)

# Plot the time series with forecast
autoplot(air_passengers, value) +
  autolayer(fc) +
  labs(title = "Air Passenger Forecast",
       y = "Passengers",
       x = "Year")
```

<div class="big-bullets">
-   $Time Series Analysis \Rightarrow Decomposition/Segmentation$
</div>

## TS Decomposition

```{r decomp}
#| echo: true
air_passengers |> 
    model(stl = STL(value)) |> 
    components() |> 
    autoplot()
```

## A More 'Real World' Dataset {.smaller}

Courtesy of [Gun Violence Archive](https://www.gunviolencearchive.org)

::: panel-tabset

### Background
::: {style="font-size: 0.8em;"}
This is an initial look at the Malcolm Gladwell assertion from Revisionist History podcast [Guns Part 4: Moral Hazard](https://www.pushkin.fm/podcasts/revisionist-history/guns-part-4-moral-hazard). The assertion is that gun homicide statistics, which are decreasing, are masking a rise in total gun violence incidents because non-fatal shooting are not counted in the data. 

Note: the data from the Gun Violence Archive includes both fatality and injury-only incidents and is compiled from media reports. Incidents that were reported to the police, but not found in public reports is not included.
:::

### Overview Plot

```{r gva}
#| echo: false


gva3state <- read_excel(here("data/Gun Violence Archive - University of San Diego - Killed or Injured 20140101 - 20231010.xlsx"), 
    skip = 4) |> 
    mutate( Date = as.Date(Date),
            severity = case_when(
                `# Victims Killed` > 0 ~ 'Victim Fatality',
                `# Victims Injured` > 0 ~ 'Victim Injury',
                `# Suspect Killed` > 0 ~ 'Suspect Fatality',
                `# Suspects Injured` > 0 ~ 'Suspect Injury',
                TRUE ~ 'No Injury'),
            fatality = str_detect(severity, 'Fatality'))

gva3state |> 
    filter(fatality == TRUE) |> 
    count(Date, name = 'Incidents') |> 
    ggplot(aes(Date, Incidents)) + 
    geom_line() +
    geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs")) +
    ggtitle("Number of Gun Fatalities/Day (CA + IN + IL)" )
```




### Decomp

```{r gva_decomp1}
#| echo: false

gva3state |> 
    filter(Date < ymd('2023-10-01'),
           Date >= ymd('2020-10-01')) |>
    count(Date, name = 'Incidents') |> 
    as_tsibble(index = Date) |> 
    fill_gaps(Incidents = 0L) |> 
    model(stl = STL(Incidents)) |> 
    components() |> 
    autoplot()
```

### Data  {.smaller}

```{r gva_raw}
#| echo: false
#| class-output: "small-table"

library(gt)
gva3state |> 
    select(`Incident ID`, Date, State, City, severity, fatality) |> 
    head(50) |> 
    gt()

```
:::

##  {.smaller}

```{r gva_decomp2}
#| echo: true
#| code-line-numbers: 4-6

gva_ts_yr <- gva3state |> 
    filter(Date < ymd('2023-10-01'),
           Date >= ymd('2020-10-01')) |> 
    count(Date, State, fatality, name = 'Incidents') |> 
    as_tsibble(index = Date,
               key = c(State, fatality)) |> 
    fill_gaps(Incidents = 0L)

gva_ts_yr_plt <- gva_ts_yr |> 
    model(stl = STL(Incidents)) |> 
    components() |> 
    autoplot() 
gva_ts_yr_plt
```

##  {.smaller}

```{r plotly}
library(plotly)
ggplotly(gva_ts_yr_plt)
```

## Chicago

```{r chicago}
gva_chicago <- gva3state |> 
    filter(Date < ymd('2023-10-01'),
           Date >= ymd('2020-10-01'),
           City == "Chicago",
           State == "Illinois") |> 
    count(Date, City, name = 'Incidents') |> 
    as_tsibble(index = Date) |> 
    fill_gaps(Incidents = 0L)

gva_chi_train <- gva_chicago |> filter(Date < ymd('2023-09-01'))
gva_chi_test <- gva_chicago |> filter(Date >= ymd('2023-09-01'))

gva_chi_train |> 
    autoplot(Incidents) +
    geom_line(data = gva_chi_test, color = "skyblue") +
    ggtitle('Chicago Gun Violence 2023')
```

```{r chi_forecast}
chi_fit <- gva_chi_train |> 
  model(ETS(Incidents))

# Forecast the next 12 periods
chi_fc <- chi_fit %>% forecast(h = 30)

# Plot the time series with forecast
gva_chi_train |> 
    filter(year(Date) == 2023) |> 
    autoplot(Incidents) +
    autolayer(chi_fc, Incidents, alpha = 0.5) +
    autolayer(gva_chi_test, Incidents, alpha = 0.3)+
    labs(title = "Chicago GVA September Incidents Forecast")

```

```{r}
gva_chi_train |> 
    gg_tsdisplay(y = Incidents |> 
                     difference() |> 
                     difference(7), 
                 plot_type = 'partial')
```



```{r chi_arima}
chi_fit <- gva_chi_train |> 
  model(ETS = ETS(Incidents),
        #auto_arima = ARIMA(Incidents),
        arima = ARIMA(Incidents ~ pdq(1,1,0) + PDQ(0,1,1)))

# Forecast the next 12 periods
chi_fc <- chi_fit %>% forecast(h = 30)

# Plot the time series with forecast
gva_chi_train |> 
    filter(year(Date) == 2023) |> 
    autoplot(Incidents) +
    autolayer(chi_fc, Incidents, level = NULL) +
    autolayer(gva_chi_test, Incidents, alpha = 0.3)+
    labs(title = "Chicago GVA September Incidents Forecast")

```